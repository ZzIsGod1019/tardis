[package]
name = "tardis"
version.workspace = true
authors.workspace = true
description.workspace = true
keywords.workspace = true
categories.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
license.workspace = true
edition.workspace = true
readme = "README.md"

[lib]
name = "tardis"
path = "src/lib.rs"

[features]
default = ["tardis-macros"]
conf-remote = ["web-client", "async-trait", "rust-crypto"]
crypto = ["rust-crypto", "rsa"]
crypto-with-sm = ["crypto", "libsm", "num-bigint"]
future = ["futures", "async-stream", "futures-util", "async-trait"]
tls = ["native-tls"]
reldb-core = ["future", "sqlparser", "sea-orm", "sqlx"]
reldb-postgres = [
    "reldb-core",
    "sea-orm/postgres-array",
    "sea-orm/sqlx-postgres",
    "tardis-macros/reldb-postgres",
]
reldb-mysql = ["reldb-core", "sea-orm/sqlx-mysql", "tardis-macros/reldb-mysql"]
reldb-sqlite = ["reldb-core", "sea-orm/sqlx-sqlite"]
reldb = ["reldb-core", "reldb-postgres", "reldb-mysql", "reldb-sqlite"]
web-server = ["future", "poem", "poem-openapi", "poem-openapi-derive"]
web-client = ["reqwest"]
ws-client = ["future", "tokio-tungstenite", "tls"]
cache = ["futures-util", "redis", "deadpool-redis"]
mq = ["futures-util", "lapin", "amq-protocol-types", "async-global-executor"]
mail = ["lettre"]
os = ["async-trait", "anyhow", "rust-s3"]
fs = ["tokio/fs"]
process = ["tokio/process"]
test = ["testcontainers"]
tracing = ["tracing-opentelemetry", "opentelemetry"]

[dependencies]
# Basic
serde = { version = "1", features = ["derive"] }
serde_json = { version = "1" }
derive_more = { version = "0.99" }
nanoid = { version = "0.4" }
base64 = { version = "0.21" }
hex = { version = "0.4" }
lazy_static = { version = "1.4" }
rand = { version = "0.8" }
rand_core = { version = "0.6" }
chrono = { version = "0.4" }
config = { version = "0.13" }
regex = { version = "1.5" }
url = { version = "2.2" }
lru = { version = "0.11.0" }
# Tokio
tokio = { version = "1", features = [
    "macros",
    "rt-multi-thread",
    "signal",
    "time",
    "sync",
] }
# Tardis Macros
tardis-macros = { version = "0.1.0-beta.11", path = "../tardis-macros", optional = true }
# Log
tracing = { version = "0.1" }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# Tracing
tardis-trace-exporter = { version = "0.1.0-beta.11", path = "../tardis-trace-exporter", optional = true }
tracing-opentelemetry = { version = "0.19", optional = true }
opentelemetry = { version = "0.19", default-features = false, features = [
    "trace",
    "rt-tokio",
], optional = true }

# TLS
native-tls = { version = "0.2", optional = true }

# Crypto
rust-crypto = { version = "0.2", optional = true }
rsa = { version = "0.9", features = ["pem"], optional = true }
libsm = { version = "0.5", optional = true }
num-bigint = { version = "0.4.3", optional = true }

# Future
futures = { version = "0.3", optional = true }
async-stream = { version = "0.3", optional = true }
futures-util = { version = "0.3", optional = true }
async-trait = { version = "0.1", optional = true }

# RelDB
sea-orm = { version = "0.12", features = [
    "macros",
    "runtime-tokio-native-tls",
    "debug-print",
], optional = true }
sqlx = { version = "0.7", features = ["any"], optional = true }
sqlparser = { version = "0.36", optional = true }

# Web Server
poem-openapi = { version = "3", features = [
    "rapidoc",
    "chrono",
    "websocket",
], optional = true }
poem-openapi-derive = { version = "3", optional = true }
poem = { version = "1.3", features = [
    "csrf",
    "opentelemetry",
    "rustls",
    "prometheus",
    "websocket",
    "multipart",
    "tempfile",
], optional = true }

# Web Client
reqwest = { version = "0.11", features = [
    "json",
    "multipart",
], optional = true }

# Websocket Client
tokio-tungstenite = { version = "0.20", features = [
    "native-tls",
], optional = true }

# Redis
redis = { version = "0.23", features = [
    "tokio-comp",
    "tokio-native-tls-comp",
], optional = true }
deadpool-redis = { version = "0.12", optional = true }

# Rabbit
lapin = { version = "2.0", optional = true }
amq-protocol-types = { version = "7.0", optional = true }
async-global-executor = { version = "2.0", optional = true }

# Mail
lettre = { version = "0.10.4", features = [
    "smtp-transport",
    "tokio1",
    "tokio1-native-tls",
    "builder",
], optional = true }

# Object Storage
rust-s3 = { version = "0.33", optional = true }
anyhow = { version = "1.0", optional = true }

# Test
testcontainers = { version = "0.14", optional = true }

[dev-dependencies]
# Common
tokio = { version = "1", features = ["time", "rt", "macros", "sync"] }
criterion = { version = "0.5" }

[[test]]
name = "test_config"
required-features = ["crypto"]

[[test]]
name = "test_config_with_remote"
required-features = [
    "test",
    "crypto",
    "web-server",
    "cache",
    "web-client",
    "conf-remote",
    "mq",
]

[[test]]
name = "test_crypto"
required-features = ["crypto", "crypto-with-sm"]

[[test]]
name = "test_reldb_client"
required-features = ["test", "reldb"]

[[test]]
name = "test_web_server"
required-features = ["test", "web-server", "cache", "web-client", "crypto"]

[[test]]
name = "test_web_client"
required-features = ["test", "web-client"]

[[test]]
name = "test_websocket"
required-features = ["test", "web-server", "ws-client"]

[[test]]
name = "test_cache_client"
required-features = ["test", "cache"]

[[test]]
name = "test_mq_client"
required-features = ["test", "mq"]

[[test]]
name = "test_search_client"
required-features = ["test", "web-client"]

[[test]]
name = "test_mail_client"
required-features = ["test", "mail"]

[[test]]
name = "test_os_client"
required-features = ["test", "os"]

[[test]]
name = "test_basic_tracing"
required-features = ["test", "tracing"]

[[bench]]
name = "json_benchmark"
harness = false

[[bench]]
name = "field_benchmark"
harness = false

[[bench]]
name = "crypto_benchmark"
harness = false
required-features = ["crypto", "crypto-with-sm"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
